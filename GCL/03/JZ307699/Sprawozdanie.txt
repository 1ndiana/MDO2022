Imię i nazwisko: Julia Żychowska
Kierunek: Informatyka Stosowana (NS)
Nr. indeksu: 307699
Przedmiot: Metodyki DevOps
Sprawozdanie: 01
Grupa: GĆL03

Sprawozdanie

1. Zainstaluj klienta Git i obsługę kluczy SSH
	Instalowanie gita, używając polecenia:   
	Screeny 1_1, 1_2
2. Sklonuj repozytorium https://github.com/InzynieriaOprogramowaniaAGH/MDO2022 za pomocą HTTPS
	Sklonowałam repozytorium za pomocą HTTPS używając polecenia git clone i adresu https:
	Screeny 2_1, 2_2
3. Upewnij się w kwestii dostępu do repozytorium jako uczestnik i sklonuj je za pomocą utworzonego klucza SSH
	• Utwórz dwa klucze SSH, inne niż RSA, w tym co najmniej jeden zabezpieczony hasłem
		Początkowo tworzyłam klucze SSH – DSA, poleceniem:  
 		Screeny 3_1, 3_2
		które nie chciały się podpiąć do Github’a
		Screeny 3_3
		W następnej próbie utworzyłam 2 klucze ED25519, poleceniem: 
		Screeny 3_4, 
		przy których już nie było problemu. Pierwszy klucz nazwałam klucz1 i jest on bez hasła:
		Screeny 3_5
		Drugi klucz nazwałam klucz2 i jest już on z hasłem:
 		Screeny 3_6
	• Skonfiguruj klucz SSH jako metodę dostępu
		Dodałam dwa utworzone klucze do konta gitHub:
 		Screeny 3_7
		W polu key wpisałam utworzony klucz publiczny. Czynność potwórzyłam dla klucza1 i dla klucz2. Co dało następujący efekt:
 		Screeny 3_8
	• Sklonuj repozytorium z wykorzystaniem protokołu SSH
		Rozpoczełam od uruchomienia ssh-agenta poleceniem  
 		Screeny 3_9, 3_10
		następnie dodałam klucz prywatny do agenta poleceniem:
 		Screeny 3_11, 3_12
		i sklonowałam repozytorium za pomocą protokołu SSH: git@github.com:InzynieriaOprogramowaniaAGH/MDO2022.git, dla pierwszego klucza, poleceniem: 
 		Screeny 3_13, 3_14
 		Sprawdziłam użycie klucza w gitHub i wyszło, że klucz1 został wykorzystany:
 		Screeny 3_15
		Następnie przeszłam do sprawdzenia drugiego klucza (klucz2 – z hasłem). Analogicznie jak przy kluczu1  uruchomiłam agenta i dodałam klucz2. Jedyną różnicą było to, ze przy dodawaniu poprosił mnie o wcześniej przypisane hasło:
 		Screeny 3_16
		Po tej czynności pobrałam repozytorium ponownie:
 		Screeny 3_17
		Przed kolejnym pobraniem repozytorium usuwałam poprzednie poleceniem: rm -rf MDO2022.
		Sprawdzając wykorzystanie klucza okazało się, że drugi również został wykorzystany:
 		Screeny 3_18
4. Przełącz się na gałąź swojej grupy
	Polceniem git checkout GCL03 przełączyłam się na gałąź GCL03
 	Screeny 4_1
5. Utwórz gałąź o nazwie "inicjały & nr indeksu" np. KD232144
	Poleceniem git checkout -b JZ307699, utworzyłam nową gałąź i od razu się na nią przełączyłam:
	Screeny 5_1
	Tutaj zrobiony punkt 4 i 5 w ubuntu:
 	Screeny 5_2
6. Rozpocznij pracę na nowej gałęzi
	• W katalogu właściwym dla grupy utwórz nowy katalog, także o nazwie "inicjały & nr indeksu" np. KD232144
		W katalogu MDO2022/GCL/03 utworzyłam poleceniem mkdir JZ307699 katalog: 
		Screeny 6_1
	• W nowym katalogu dodaj plik ze sprawozdaniem
		W katalogu JZ307699 wrzuciłam aktualne sprawozdanie
 		Screeny 6_2, 6_2_1
	• Dodaj zrzuty ekranu
		Zrzuty ekranu umieściłam.
		Screeny 6_2, 6_2_1
	• Wyślij zmiany do zdalnego źródła
		Dodałam plik „Sprawo” poleceniem git add Sprawko.docx, następnie zrobiłam commita, git commit -m „Sprawozdanie”. Terminal poprosił mnie o podanie maila, który powie mu kim jestem. Następnie powtórzyłam wykonanie commita i wysłałam zmiany do zdalnego źródła poleceniem git push origin JZ307699.
		Screeny przed popawieniem 6_3
		Dodałam plik „Sprawozdanie” poleceniem git add Sprawozdanie.txt, screeny dodałam poleceniem "git add .". Polecenie to pozwoliło mi dodać wszystkie pliki za jednym zamachem. Następnie zrobiłam commita, git commit -m „Sprawozdanie - poprawione” i wysłałam zmiany do zdalnego źródła poleceniem git push origin JZ307699. Napotkałam problemy ze względu, że robiłam to po czasie, musiałam uruchomić ssh-agenta oraz dodać klucz2 na którym ostatnio pobierałam repozytorium, żeby mieć do niego dostęp.
		Screeny po poprawce 6_3_1, 6_3_2
	• Spróbuj wciągnąć swoją gałąź do gałęzi grupowej
		Poleceniem git merge JZ307699 scaliłam zmiany wykonane w gałęzi JZ307699 z gałęzią bieżącą GCL03 (poleceniem git checkout GCL03 ustawiłam się na tej gałęzi). Następnie probówałam wysłać zmiany do źródła, które wyświetliły błąd:
 		Screeny 6_4
	• Zaktualizuj sprawozdanie i zrzuty o ten krok i wyślij aktualizację do zdalnego źródła (na swojej gałęzi)
		Zaktualizowałam sprawozdanie:
 		Screeny 6_5
	• Oznacz tagiem ostatni commit i wypchnij go na zdalną gałąź
		Z racji, że wyszłam z terminala musiałam powtórzyć uruchomienie agenta i dodanie klucza2 do niego. Poleceniem git tag 2.0.0.JZ fdc64e602f stworzyłam tag do poprzedniego commita (10 pierwszych liczb nazwy poprzedniego commita). Następnie poleceniem git push origin 2.0.0.JZ wrzuciłam go na zdalną gałęź:
 		Screeny 6_6
	• Ustal hook, który będzie sprawdzał, czy wiadomość z commitem zawiera nazwę przedmiotu
		---------------------------------------
	• W jaki sposób stworzyć hook, który będzie ustawiał prefiks wiadomości commitu tak, by miał nazwę przedmiotu?
		---------------------------------------
7. Wystaw Pull Request do gałęzi grupowej
8. Zgłoś zadanie (Teams assignment)
