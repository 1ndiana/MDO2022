Instalacja dockera(usuwamy poprzednio zainstalowane,
robimy aktualizację, instalujemy dockera):
- sudo apt-get remove docker docker-engine docker.io containerd runc
- sudo apt-get update
- sudo apt-get install \
apt-transport-https \
ca-certificates \
curl \
gnupg-agent \
software-properties-common
- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
- echo \   "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \   $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
- sudo apt-get update
- sudo apt-get install docker-ce docker-ce-cli containerd.io
- sudo apt install docker.io

Pobranie hello-world, busysbox, ubuntu:
- docker pull hello-world
- docker pull busybox
- docker pull ubuntu

Odpalenie Busybox:
- sudo docker run -it --rm busybox
Sprawdzenie wersji Busybox (nie wychodząc z busybox):
- busybox | head -1

Wyświetlenie listy procesów:
- ps -aux

Aktualizacja pakietów:
- apt-get update

Wyjście z busybox:
- exit

Pokazanie kontenerów, które nie są uruchomione, ale "exited", czyli zakończone, nie działające:
- docker ps -f status=exited

Wyczyszczenie wszystkich obrazów:
- docker image prune -a

Sklonowanie repo z przykładowym programem do wywołania testów jednostkowych:
- repo: https://github.com/howtoprogram/junit5-examples.git
- instalacja openjdk (wirtualna maszyna Javy): apt-get install openjdk-8-jdk
- instalacja gradle (do budowania aplikacji Java):
	- wget https://services.gradle.org/distributions/gradle-6.4.1-bin.zip -P /tmp
	- sudo unzip -d /opt/gradle /tmp/gradle-*.zip

Uruchomienie testów:
- gradle tests (uruchomienie testów)
- gradle build (buduje z testami)

Stworzenie dockerfile (img18)

Zbudowanie dockerfile:
- docker build . -t project

Stworzenie kolejnego obrazu, na podstawie poprzedniego:
- zmiana projektu bazowego w dockerfile (FROM project) (img20)

Zbudowanie drugiego dockerfile:
- docker build . -f Dockerfile -t project2 (dodajemy -f, aby użyć drugiego Dockerfile, nie domyślnego)


